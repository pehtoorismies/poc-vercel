name: ci

on: [deployment_status]

jobs:
  e2e:
    # only runs this job on successful deploy
    if: github.event.deployment_status.state == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: Checkout ðŸ›Ž
        uses: actions/checkout@v1
      - name: Run Cypress ðŸŒ²
        uses: cypress-io/github-action@v2
        env:
          CYPRESS_BASE_URL: ${{ github.event.deployment_status.target_url }}
      - name: Cypress tests âœ…
        if: ${{ success() }}
        # set the merge commit status check
        # using GitHub REST API
        # see https://docs.github.com/en/rest/reference/repos#create-a-commit-status
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "context": "e2e",
            "state": "success",
            "description": "Cypress tests passed"
          }'

      - name: Cypress tests ðŸš¨
        if: ${{ failure() }}
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "context": "e2e",
            "state": "failure",
            "description": "Cypress tests failed"
          }'
# jobs:
#   set_pending:
#     name: Register pending E2E tests state
#     # This is the place where we define this job to only
#     # run when the deployment state is still "pending".
#     if: github.event.deployment_status.state == 'pending'
#     runs-on: ubuntu-latest

#     steps:
#       # This checks out the code of this repository.
#       # We need this because this is where our action
#       # lives.
#       - uses: actions/checkout@v1

#       - name: Set status to "pending"
#         uses: ./.github/actions/set-pr-status
#         env:
#           # You don't need to configure any secrets for this
#           # to work. GitHub injects the GITHUB_TOKEN automatically.
#           # We need it in this step so that our action
#           # can talk to the GitHub API.
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           # This is where we define the inputs
#           # for this action.
#           state: pending
#           description: Waiting for E2E results

# # name: Test vercel

# # on:
# #   push:
# #     branches: [$default-branch]
# #   pull_request:
# #     branches: [$default-branch]

# # jobs:
# #   test:
# #     runs-on: ${{ matrix.os }} # runs a test on Ubuntu, Windows and macOS

# #     strategy:
# #       matrix:
# #         deno: ["v1.x", "nightly"]
# #         os: [macOS-latest, windows-latest, ubuntu-latest]

# #     steps:
# #       - name: Setup repo
# #         uses: actions/checkout@v2

# #       - name: Setup Deno
# #         uses: denolib/setup-deno@c7d7968ad4a59c159a777f79adddad6872ee8d96
# #         with:
# #           deno-version: ${{ matrix.deno }} # tests across multiple Deno versions

# #       - name: Cache Dependencies
# #         run: deno cache deps.ts

# #       - name: Run Tests
# #         run: deno test -A --unstable# This workflow uses actions that are not certified by GitHub.
# # # They are provided by a third-party and are governed by
# # # separate terms of service, privacy policy, and support
# # # documentation.
